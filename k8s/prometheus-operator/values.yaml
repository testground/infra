---
# Testground values overrides:

# Changes from defaults:
# * Disabled the alertmanager.
# * We do not manage certificates. In order to prevent scrape errors caused by
#   certificate malfunction, skip TLS checks or disable https.
# * The grafana username and password are stored in a kubernetes secret called
#   <RELEASE>-grafana. Changed from the default (prom-operator) to testground.
# * Enable the grafana sidecar. This will watch for secrets or configmaps which
#   have the label grafana_dashboard or grafana_datasource, and adds them
#   automatically to the grafana dashboard.
# * I configured the scraper to look for ServiceMonitors in any namespace. This
#   allows a single prometheus to scrape plan as well as kube-system metrics.
# * createCustomResource is configured to false. For helm v3, custom resources
#   are still created. By including this option, users won't see a confusing
#   error message about CRDs not being created.
#   See the following for a description of this option:
#   https://github.com/helm/charts/blob/master/stable/prometheus-operator/
#   for an explanation of this option.
prometheusOperator:
  createCustomResource: false
  admissionWebooks:
    patch:
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - redis
        topologyKey: "kubernetes.io/hostname"
  nodeSelector:
    testground.node.role.infra: "true"
  resources:
    requests:
      memory: 512Mi
      cpu: 500m
    limits:
      memory: 512Mi
alertmanager:
  enabled: false
grafana:
  defaultDashboardsEnabled: false
  grafana.ini:
    users:
      viewers_can_edit: false
    auth:
      disable_login_form: false
      disable_signout_menu: false
    auth.anonymous:
      enabled: true
      org_role: Viewer
  adminPassword: admin
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - redis
        topologyKey: "kubernetes.io/hostname"
    podAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - prometheus-operator-operator
        topologyKey: "kubernetes.io/hostname"
  nodeSelector:
    testground.node.role.infra: "true"
  sidecar:
    dashboards:
      enabled: true
    datasources:
      enabled: true
  additionalDataSources:
  - name: influxdb
    access: proxy
    database: "testground"
    basicAuth: false
    editable: true
    jsonData:
        tlsSkipVerify: true
    orgId: 1
    type: influxdb
    url: http://influxdb:8086
    version: 1
  affinity:
    podAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - prometheus-operator-operator
        topologyKey: "kubernetes.io/hostname"
kubeProxy:
  serviceMonitor:
    https: false
kubelet:
  serviceMonitor:
    https: false
kubeApiServer:
  tlsConfig:
    insecureSkipVerify: true
  serviceMonitor:
    https: false
kubeControllerManager:
  serviceMonitor:
    insecureSkipVerify: true
    https: false
kubeEtcd:
  serviceMonitor:
    insecureSkipVerify: true
    https: false
kubeStateMetrics:
  enabled: false
prometheus:
  prometheusSpec:
    serviceMonitorSelectorNilUsesHelmValues: false
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - redis
          topologyKey: "kubernetes.io/hostname"
      podAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - prometheus-operator-operator
          topologyKey: "kubernetes.io/hostname"
    nodeSelector:
      testground.node.role.infra: "true"
    resources:
      requests:
        memory: 6000Mi
        cpu: 1000m
      limits:
        memory: 6000Mi
