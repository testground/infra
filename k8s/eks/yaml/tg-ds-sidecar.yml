apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: testground-sidecar
spec:
  selector:
    matchLabels:
      name: testground-sidecar
  template:
    metadata:
      labels:
        name: testground-sidecar
    spec:
      terminationGracePeriodSeconds: 10
      hostPID: true
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      priorityClassName: system-node-critical
      containers:
      - name: testground-sidecar
        image: public.ecr.aws/n6b0k8i7/testground-sidecar:80c5aca36114de067c33c8718cca95ef16db4c06
        imagePullPolicy: Always
        command: ["testground"]
        args: ["sidecar", "--runner", "k8s"]
        securityContext:
          # Capabilities explained here https://man7.org/linux/man-pages/man7/capabilities.7.html
          capabilities:
            add: ["NET_ADMIN", "SYS_ADMIN", "SYS_TIME"]
          privileged: true
        env:
        - name: LOG_LEVEL
          value: "DEBUG"
        - name: REDIS_HOST
          value: "testground-infra-redis"
        - name: INFLUXDB_HOST
          value: "influxdb"
        - name: INFLUXDB_URL
          value: http://influxdb:8086
        ports:
        - name: sidecarhttp
          containerPort: 6060
        resources:
          limits:
            memory: 900Mi
            cpu: 800m
          requests:
            cpu: 400m
            memory: 512Mi
        volumeMounts:
          - name: dockersock
            mountPath: "/var/run/docker.sock"
          - name: cnibin
            mountPath: "/host/opt/cni/bin"
      volumes:
      - name: dockersock
        hostPath:
          path: /var/run/docker.sock
      - name: cnibin
        hostPath:
          path: /opt/cni/bin
      nodeSelector:
        testground.node.role.plan: "true"

# Notes:
# add: ["NET_ADMIN", "SYS_ADMIN", "SYS_TIME"] had to be added to the config because sidecar pods were unable to be scheduled with the following error:
# ERROR  sidecar worker failed: failed to initialise the container: failed to get handle to network namespace: failed to set into network namespace 19 while creating netlink socket: operation not permitted  {"host": "unix:///var/run/docker.sock", "container": "b510d89b2c66dc8a18472be548170657d28114cc8eeb3d368d266a2787c68007"}
# Issue referenced here:
# https://github.com/testground/testground/issues/1461

# testground (storm) tests failing when using more than 40 instances/pods; errors encountered:
# FATAL error while reading socket {"error": "failed to read JSON message: failed to get reader: failed to read frame header: EOF"}
# The solution was to increase hardware limits and requests for both the sidecar and the daemon
# Issue referenced here:
# https://github.com/testground/testground/issues/1454