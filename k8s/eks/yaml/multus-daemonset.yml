# Forked from here:
# https://github.com/k8snetworkplumbingwg/multus-cni/blob/f4c0adf54c99d7395d30a050a8d29b674b99d700/deployments/multus-daemonset.yml
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: network-attachment-definitions.k8s.cni.cncf.io
spec:
  group: k8s.cni.cncf.io
  scope: Namespaced
  names:
    plural: network-attachment-definitions
    singular: network-attachment-definition
    kind: NetworkAttachmentDefinition
    shortNames:
    - net-attach-def
  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: 'NetworkAttachmentDefinition is a CRD schema specified by the Network Plumbing
            Working Group to express the intent for attaching pods to one or more logical or physical
            networks. More information available at: https://github.com/k8snetworkplumbingwg/multi-net-spec'
          type: object
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this represen
                tation of an object. Servers should convert recognized schemas to the
                latest internal value, and may reject unrecognized values. More info:
                https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this
                object represents. Servers may infer this from the endpoint the client
                submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: 'NetworkAttachmentDefinition spec defines the desired state of a network attachment'
              type: object
              properties:
                config:
                  description: 'NetworkAttachmentDefinition config is a JSON-formatted CNI configuration'
                  type: string
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: multus
rules:
  - apiGroups: ["k8s.cni.cncf.io"]
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/status
    verbs:
      - get
      - update
  - apiGroups:
      - ""
      - events.k8s.io
    resources:
      - events
    verbs:
      - create
      - patch
      - update
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: multus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: multus
subjects:
- kind: ServiceAccount
  name: multus
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: multus
  namespace: kube-system
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: multus-cni-config
  namespace: kube-system
  labels:
    tier: node
    app: multus
data:
  cni-conf.json: |
    {
      "name": "multus-cni-network",
      "cniVersion": "0.3.1",
      "type": "multus",
      "capabilities": {
        "portMappings": true
      },
      "delegates": [
        {
          "cniVersion": "0.3.1",
          "name": "aws-cni",
          "plugins": [
            {
              "name": "aws-cni",
              "type": "aws-cni",
              "vethPrefix": "eni",
              "mtu": "9001",
              "pluginLogFile": "/var/log/aws-routed-eni/plugin.log",
              "pluginLogLevel": "DEBUG"
            },
            {
              "type": "portmap",
              "capabilities": {
                "portMappings": true
              },
              "snat": true
            }
          ]
        }
      ],
      "kubeconfig": "/etc/cni/net.d/multus.d/multus.kubeconfig"
    }
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: multus
    name: multus
    tier: node
  name: kube-multus-ds
  namespace: kube-system
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: multus
  template:
    metadata:
      labels:
        app: multus
        name: multus
        tier: node
    spec:
      containers:
      - args:
        - -cni-version=0.3.1
        - -cni-config-dir=/host/etc/cni/net.d
        - -multus-autoconfig-dir=/host/etc/cni/net.d
        - -multus-log-to-stderr=true
        - -multus-log-level=verbose
        command:
        - /bin/bash
        - -cex
        - |
          #!/bin/bash
          sed "s|__KUBERNETES_NODE_NAME__|${KUBERNETES_NODE_NAME}|g" /tmp/multus-conf/00-multus.conf.template > /tmp/multus-conf/00-multus.conf
          /entrypoint.sh \
            --multus-conf-file=/tmp/multus-conf/00-multus.conf
        - /usr/src/multus-cni/bin/multus-daemon
        image: ghcr.io/k8snetworkplumbingwg/multus-cni:v3.9.2
        imagePullPolicy: IfNotPresent
        name: kube-multus
        resources:
          limits:
            cpu: 100m
            memory: 50Mi
          requests:
            cpu: 100m
            memory: 50Mi
        securityContext:
          privileged: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /host/etc/cni/net.d
          name: cni
        - mountPath: /host/opt/cni/bin
          name: cnibin
        - mountPath: /tmp/multus-conf/00-multus.conf.template
          name: multus-cfg
          subPath: "cni-conf.json"
      dnsPolicy: ClusterFirst
      hostNetwork: true
      initContainers:
      - command:
        - cp
        - /usr/src/multus-cni/bin/multus
        - /host/opt/cni/bin/multus
        image: ghcr.io/k8snetworkplumbingwg/multus-cni:v3.9.2
        imagePullPolicy: IfNotPresent
        name: install-multus-binary
        resources:
          requests:
            cpu: 10m
            memory: 15Mi
        securityContext:
          privileged: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /host/opt/cni/bin
          mountPropagation: Bidirectional
          name: cnibin
      - args:
        - -k8s-service-host=$(KUBERNETES_SERVICE_HOST)
        - -k8s-service-port=$(KUBERNETES_SERVICE_PORT)
        command:
        - /usr/src/multus-cni/bin/generate-kubeconfig
        image: ghcr.io/k8snetworkplumbingwg/multus-cni:v3.9.2
        imagePullPolicy: IfNotPresent
        name: generate-kubeconfig
        resources:
          requests:
            cpu: 10m
            memory: 15Mi
        securityContext:
          privileged: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /host/etc/cni/net.d
          mountPropagation: Bidirectional
          name: cni
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: multus
      serviceAccountName: multus
      terminationGracePeriodSeconds: 10
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - effect: NoExecute
        operator: Exists
      volumes:
      - hostPath:
          path: /etc/cni/net.d
          type: ""
        name: cni
      - hostPath:
          path: /opt/cni/bin
          type: ""
        name: cnibin
      - name: multus-cfg
        configMap:
          name: multus-cni-config
  updateStrategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate

# Notes:
# multus and weave were 'fighting' over eth0; happening because multus writes the weave config inside 00-multus.conf, instead of the primary CNI config. errors like:
# could not create veth pair vethwepl7524981-vethwepg7524981: file exists
# Initially solved by restarting the 'kube-multus-ds' in '-n kube-system', but later introduced a custom configmap and editing the multus daemonset ("cniVersion": "0.3.1") 
# so it always includes the primary CNI config (AWS VPC CNI instead of weave)
# Issue referenced here:
# https://github.com/testground/testground/issues/1459
